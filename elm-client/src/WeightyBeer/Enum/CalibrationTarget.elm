-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module WeightyBeer.Enum.CalibrationTarget exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CalibrationTarget
    = Zero
    | Empty
    | Full


list : List CalibrationTarget
list =
    [ Zero, Empty, Full ]


decoder : Decoder CalibrationTarget
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "zero" ->
                        Decode.succeed Zero

                    "empty" ->
                        Decode.succeed Empty

                    "full" ->
                        Decode.succeed Full

                    _ ->
                        Decode.fail ("Invalid CalibrationTarget type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : CalibrationTarget -> String
toString enum =
    case enum of
        Zero ->
            "zero"

        Empty ->
            "empty"

        Full ->
            "full"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CalibrationTarget
fromString enumString =
    case enumString of
        "zero" ->
            Just Zero

        "empty" ->
            Just Empty

        "full" ->
            Just Full

        _ ->
            Nothing
