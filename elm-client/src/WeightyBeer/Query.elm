-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module WeightyBeer.Query exposing (BrewRequiredArguments, ImageRequiredArguments, TapRequiredArguments, WeightRequiredArguments, brew, brews, image, images, tap, taps, weight, weights)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import WeightyBeer.InputObject
import WeightyBeer.Interface
import WeightyBeer.Object
import WeightyBeer.Scalar
import WeightyBeer.ScalarCodecs
import WeightyBeer.Union


type alias BrewRequiredArguments =
    { id : String }


brew : BrewRequiredArguments -> SelectionSet decodesTo WeightyBeer.Object.Brew -> SelectionSet (Maybe decodesTo) RootQuery
brew requiredArgs object_ =
    Object.selectionForCompositeField "brew" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


brews : SelectionSet decodesTo WeightyBeer.Object.Brew -> SelectionSet (List decodesTo) RootQuery
brews object_ =
    Object.selectionForCompositeField "brews" [] object_ (identity >> Decode.list)


type alias ImageRequiredArguments =
    { id : String }


image : ImageRequiredArguments -> SelectionSet decodesTo WeightyBeer.Object.Image -> SelectionSet (Maybe decodesTo) RootQuery
image requiredArgs object_ =
    Object.selectionForCompositeField "image" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


images : SelectionSet decodesTo WeightyBeer.Object.Image -> SelectionSet (List decodesTo) RootQuery
images object_ =
    Object.selectionForCompositeField "images" [] object_ (identity >> Decode.list)


type alias TapRequiredArguments =
    { id : String }


tap : TapRequiredArguments -> SelectionSet decodesTo WeightyBeer.Object.Tap -> SelectionSet (Maybe decodesTo) RootQuery
tap requiredArgs object_ =
    Object.selectionForCompositeField "tap" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


taps : SelectionSet decodesTo WeightyBeer.Object.Tap -> SelectionSet (List decodesTo) RootQuery
taps object_ =
    Object.selectionForCompositeField "taps" [] object_ (identity >> Decode.list)


type alias WeightRequiredArguments =
    { id : String }


weight : WeightRequiredArguments -> SelectionSet decodesTo WeightyBeer.Object.Weight -> SelectionSet (Maybe decodesTo) RootQuery
weight requiredArgs object_ =
    Object.selectionForCompositeField "weight" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


weights : SelectionSet decodesTo WeightyBeer.Object.Weight -> SelectionSet (List decodesTo) RootQuery
weights object_ =
    Object.selectionForCompositeField "weights" [] object_ (identity >> Decode.list)
